=begin
#JumpCloud APIs

#JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JCAPIv2
  class SystemInsightsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List System Insights ALF
    # Valid filter fields are `system_id` and `global_state`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsAlf>]
    def get_systeminsights_alf(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_alf_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights ALF
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;global_state&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsAlf>, Fixnum, Hash)>] Array<SystemInsightsAlf> data, response status code and response headers
    def get_systeminsights_alf_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_alf ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_alf"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_alf"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_alf, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_alf, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_alf, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/alf"

      # query parameters
      query_params = {}
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsAlf>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_alf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights ALF Exceptions
    # Valid filter fields are `system_id` and `state`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsAlfExceptions>]
    def get_systeminsights_alf_exceptions(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_alf_exceptions_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights ALF Exceptions
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;state&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsAlfExceptions>, Fixnum, Hash)>] Array<SystemInsightsAlfExceptions> data, response status code and response headers
    def get_systeminsights_alf_exceptions_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_alf_exceptions ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_alf_exceptions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_alf_exceptions"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_alf_exceptions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_alf_exceptions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_alf_exceptions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/alf_exceptions"

      # query parameters
      query_params = {}
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsAlfExceptions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_alf_exceptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights ALF Explicit Authentications
    # Valid filter fields are `system_id` and `process`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsAlfExplicitAuths>]
    def get_systeminsights_alf_explicit_auths(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_alf_explicit_auths_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights ALF Explicit Authentications
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;process&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsAlfExplicitAuths>, Fixnum, Hash)>] Array<SystemInsightsAlfExplicitAuths> data, response status code and response headers
    def get_systeminsights_alf_explicit_auths_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_alf_explicit_auths ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_alf_explicit_auths"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_alf_explicit_auths"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_alf_explicit_auths, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_alf_explicit_auths, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_alf_explicit_auths, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/alf_explicit_auths"

      # query parameters
      query_params = {}
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsAlfExplicitAuths>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_alf_explicit_auths\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Application Compatibility Shims
    # Valid filter fields are `system_id` and `enabled`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsAppcompatShims>]
    def get_systeminsights_appcompat_shims(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_appcompat_shims_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Application Compatibility Shims
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsAppcompatShims>, Fixnum, Hash)>] Array<SystemInsightsAppcompatShims> data, response status code and response headers
    def get_systeminsights_appcompat_shims_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_appcompat_shims ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_appcompat_shims"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_appcompat_shims"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_appcompat_shims, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_appcompat_shims, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_appcompat_shims, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/appcompat_shims"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsAppcompatShims>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_appcompat_shims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Apps
    # Valid filter fields are `system_id` and `bundle_name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsApps>]
    def get_systeminsights_apps(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_apps_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Apps
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;bundle_name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsApps>, Fixnum, Hash)>] Array<SystemInsightsApps> data, response status code and response headers
    def get_systeminsights_apps_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_apps ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_apps"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_apps"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_apps, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_apps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_apps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/apps"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsApps>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Authorized Keys
    # Valid filter fields are `system_id` and `uid`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsAuthorizedKeys>]
    def get_systeminsights_authorized_keys(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_authorized_keys_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Authorized Keys
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;uid&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsAuthorizedKeys>, Fixnum, Hash)>] Array<SystemInsightsAuthorizedKeys> data, response status code and response headers
    def get_systeminsights_authorized_keys_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_authorized_keys ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_authorized_keys"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_authorized_keys"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_authorized_keys, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_authorized_keys, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_authorized_keys, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/authorized_keys"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsAuthorizedKeys>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_authorized_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Battery
    # Valid filter fields are `system_id` and `health`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsBattery>]
    def get_systeminsights_battery(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_battery_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Battery
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;health&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsBattery>, Fixnum, Hash)>] Array<SystemInsightsBattery> data, response status code and response headers
    def get_systeminsights_battery_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_battery ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_battery"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_battery"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_battery, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_battery, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_battery, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/battery"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsBattery>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_battery\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Bitlocker Info
    # Valid filter fields are `system_id` and `protection_status`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsBitlockerInfo>]
    def get_systeminsights_bitlocker_info(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_bitlocker_info_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Bitlocker Info
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;protection_status&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsBitlockerInfo>, Fixnum, Hash)>] Array<SystemInsightsBitlockerInfo> data, response status code and response headers
    def get_systeminsights_bitlocker_info_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_bitlocker_info ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_bitlocker_info"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_bitlocker_info"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_bitlocker_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_bitlocker_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_bitlocker_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/bitlocker_info"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsBitlockerInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_bitlocker_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Browser Plugins
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsBrowserPlugins>]
    def get_systeminsights_browser_plugins(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_browser_plugins_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Browser Plugins
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsBrowserPlugins>, Fixnum, Hash)>] Array<SystemInsightsBrowserPlugins> data, response status code and response headers
    def get_systeminsights_browser_plugins_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_browser_plugins ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_browser_plugins"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_browser_plugins"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_browser_plugins, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_browser_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_browser_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/browser_plugins"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsBrowserPlugins>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_browser_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Certificates
    # Valid filter fields are `system_id` and `common_name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsCertificates>]
    def get_systeminsights_certificates(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_certificates_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Certificates
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;common_name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsCertificates>, Fixnum, Hash)>] Array<SystemInsightsCertificates> data, response status code and response headers
    def get_systeminsights_certificates_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_certificates ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_certificates"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_certificates"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_certificates, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_certificates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_certificates, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/certificates"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsCertificates>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Chrome Extensions
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsChromeExtensions>]
    def get_systeminsights_chrome_extensions(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_chrome_extensions_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Chrome Extensions
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsChromeExtensions>, Fixnum, Hash)>] Array<SystemInsightsChromeExtensions> data, response status code and response headers
    def get_systeminsights_chrome_extensions_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_chrome_extensions ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_chrome_extensions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_chrome_extensions"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_chrome_extensions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_chrome_extensions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_chrome_extensions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/chrome_extensions"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsChromeExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_chrome_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Connectivity
    # The only valid filter field is `system_id`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsConnectivity>]
    def get_systeminsights_connectivity(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_connectivity_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Connectivity
    # The only valid filter field is &#x60;system_id&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsConnectivity>, Fixnum, Hash)>] Array<SystemInsightsConnectivity> data, response status code and response headers
    def get_systeminsights_connectivity_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_connectivity ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_connectivity"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_connectivity"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_connectivity, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_connectivity, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_connectivity, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/connectivity"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsConnectivity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_connectivity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Crashes
    # Valid filter fields are `system_id` and `identifier`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsCrashes>]
    def get_systeminsights_crashes(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_crashes_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Crashes
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;identifier&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsCrashes>, Fixnum, Hash)>] Array<SystemInsightsCrashes> data, response status code and response headers
    def get_systeminsights_crashes_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_crashes ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_crashes"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_crashes"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_crashes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_crashes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_crashes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/crashes"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsCrashes>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_crashes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights CUPS Destinations
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsCupsDestinations>]
    def get_systeminsights_cups_destinations(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_cups_destinations_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights CUPS Destinations
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsCupsDestinations>, Fixnum, Hash)>] Array<SystemInsightsCupsDestinations> data, response status code and response headers
    def get_systeminsights_cups_destinations_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_cups_destinations ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_cups_destinations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_cups_destinations"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_cups_destinations, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_cups_destinations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_cups_destinations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/cups_destinations"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsCupsDestinations>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_cups_destinations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Disk Encryption
    # Valid filter fields are `system_id` and `encryption_status`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsDiskEncryption>]
    def get_systeminsights_disk_encryption(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_disk_encryption_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Disk Encryption
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;encryption_status&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsDiskEncryption>, Fixnum, Hash)>] Array<SystemInsightsDiskEncryption> data, response status code and response headers
    def get_systeminsights_disk_encryption_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_disk_encryption ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_disk_encryption"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_disk_encryption"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_disk_encryption, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_disk_encryption, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_disk_encryption, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/disk_encryption"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsDiskEncryption>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_disk_encryption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Disk Info
    # Valid filter fields are `system_id` and `disk_index`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsDiskInfo>]
    def get_systeminsights_disk_info(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_disk_info_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Disk Info
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;disk_index&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsDiskInfo>, Fixnum, Hash)>] Array<SystemInsightsDiskInfo> data, response status code and response headers
    def get_systeminsights_disk_info_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_disk_info ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_disk_info"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_disk_info"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_disk_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_disk_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_disk_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/disk_info"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsDiskInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_disk_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights DNS Resolvers
    # Valid filter fields are `system_id` and `type`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsDnsResolvers>]
    def get_systeminsights_dns_resolvers(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_dns_resolvers_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights DNS Resolvers
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsDnsResolvers>, Fixnum, Hash)>] Array<SystemInsightsDnsResolvers> data, response status code and response headers
    def get_systeminsights_dns_resolvers_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_dns_resolvers ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_dns_resolvers"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_dns_resolvers"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_dns_resolvers, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_dns_resolvers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_dns_resolvers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/dns_resolvers"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsDnsResolvers>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_dns_resolvers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Etc Hosts
    # Valid filter fields are `system_id` and `address`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsEtcHosts>]
    def get_systeminsights_etc_hosts(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_etc_hosts_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Etc Hosts
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsEtcHosts>, Fixnum, Hash)>] Array<SystemInsightsEtcHosts> data, response status code and response headers
    def get_systeminsights_etc_hosts_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_etc_hosts ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_etc_hosts"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_etc_hosts"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_etc_hosts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_etc_hosts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_etc_hosts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/etc_hosts"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsEtcHosts>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_etc_hosts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Firefox Addons
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsFirefoxAddons>]
    def get_systeminsights_firefox_addons(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_firefox_addons_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Firefox Addons
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsFirefoxAddons>, Fixnum, Hash)>] Array<SystemInsightsFirefoxAddons> data, response status code and response headers
    def get_systeminsights_firefox_addons_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_firefox_addons ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_firefox_addons"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_firefox_addons"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_firefox_addons, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_firefox_addons, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_firefox_addons, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/firefox_addons"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsFirefoxAddons>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_firefox_addons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Groups
    # Valid filter fields are `system_id` and `groupname`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsGroups>]
    def get_systeminsights_groups(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_groups_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Groups
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;groupname&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsGroups>, Fixnum, Hash)>] Array<SystemInsightsGroups> data, response status code and response headers
    def get_systeminsights_groups_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_groups ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_groups"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_groups, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/groups"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsGroups>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights IE Extensions
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsIeExtensions>]
    def get_systeminsights_ie_extensions(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_ie_extensions_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights IE Extensions
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsIeExtensions>, Fixnum, Hash)>] Array<SystemInsightsIeExtensions> data, response status code and response headers
    def get_systeminsights_ie_extensions_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_ie_extensions ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_ie_extensions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_ie_extensions"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_ie_extensions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_ie_extensions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_ie_extensions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/ie_extensions"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsIeExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_ie_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Interface Addresses
    # Valid filter fields are `system_id` and `address`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsInterfaceAddresses>]
    def get_systeminsights_interface_addresses(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_interface_addresses_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Interface Addresses
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsInterfaceAddresses>, Fixnum, Hash)>] Array<SystemInsightsInterfaceAddresses> data, response status code and response headers
    def get_systeminsights_interface_addresses_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_interface_addresses ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_interface_addresses"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_interface_addresses"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_interface_addresses, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_interface_addresses, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_interface_addresses, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/interface_addresses"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsInterfaceAddresses>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_interface_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Interface Details
    # Valid filter fields are `system_id` and `interface`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsInterfaceDetails>]
    def get_systeminsights_interface_details(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_interface_details_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Interface Details
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;interface&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsInterfaceDetails>, Fixnum, Hash)>] Array<SystemInsightsInterfaceDetails> data, response status code and response headers
    def get_systeminsights_interface_details_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_interface_details ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_interface_details"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_interface_details"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_interface_details, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_interface_details, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_interface_details, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/interface_details"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsInterfaceDetails>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_interface_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Kernel Info
    # Valid filter fields are `system_id` and `version`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsKernelInfo>]
    def get_systeminsights_kernel_info(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_kernel_info_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Kernel Info
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsKernelInfo>, Fixnum, Hash)>] Array<SystemInsightsKernelInfo> data, response status code and response headers
    def get_systeminsights_kernel_info_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_kernel_info ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_kernel_info"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_kernel_info"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_kernel_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_kernel_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_kernel_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/kernel_info"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsKernelInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_kernel_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Launchd
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsLaunchd>]
    def get_systeminsights_launchd(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_launchd_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Launchd
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsLaunchd>, Fixnum, Hash)>] Array<SystemInsightsLaunchd> data, response status code and response headers
    def get_systeminsights_launchd_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_launchd ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_launchd"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_launchd"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_launchd, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_launchd, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_launchd, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/launchd"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsLaunchd>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_launchd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Logged-In Users
    # Valid filter fields are `system_id` and `user`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsLoggedInUsers>]
    def get_systeminsights_logged_in_users(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_logged_in_users_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Logged-In Users
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;user&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsLoggedInUsers>, Fixnum, Hash)>] Array<SystemInsightsLoggedInUsers> data, response status code and response headers
    def get_systeminsights_logged_in_users_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_logged_in_users ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_logged_in_users"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_logged_in_users"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_logged_in_users, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_logged_in_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_logged_in_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/logged_in_users"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsLoggedInUsers>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_logged_in_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Logical Drives
    # Valid filter fields are `system_id` and `device_id`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsLogicalDrives>]
    def get_systeminsights_logical_drives(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_logical_drives_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Logical Drives
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;device_id&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsLogicalDrives>, Fixnum, Hash)>] Array<SystemInsightsLogicalDrives> data, response status code and response headers
    def get_systeminsights_logical_drives_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_logical_drives ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_logical_drives"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_logical_drives"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_logical_drives, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_logical_drives, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_logical_drives, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/logical_drives"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsLogicalDrives>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_logical_drives\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Managed Policies
    # Valid filter fields are `system_id` and `domain`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsManagedPolicies>]
    def get_systeminsights_managed_policies(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_managed_policies_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Managed Policies
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;domain&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsManagedPolicies>, Fixnum, Hash)>] Array<SystemInsightsManagedPolicies> data, response status code and response headers
    def get_systeminsights_managed_policies_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_managed_policies ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_managed_policies"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_managed_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_managed_policies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_managed_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_managed_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/managed_policies"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsManagedPolicies>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_managed_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Mounts
    # Valid filter fields are `system_id` and `path`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsMounts>]
    def get_systeminsights_mounts(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_mounts_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Mounts
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;path&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsMounts>, Fixnum, Hash)>] Array<SystemInsightsMounts> data, response status code and response headers
    def get_systeminsights_mounts_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_mounts ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_mounts"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_mounts"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_mounts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_mounts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_mounts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/mounts"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsMounts>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_mounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights OS Version
    # Valid filter fields are `system_id` and `version`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsOsVersion>]
    def get_systeminsights_os_version(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_os_version_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights OS Version
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsOsVersion>, Fixnum, Hash)>] Array<SystemInsightsOsVersion> data, response status code and response headers
    def get_systeminsights_os_version_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_os_version ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_os_version"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_os_version"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_os_version, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_os_version, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_os_version, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/os_version"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsOsVersion>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_os_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Patches
    # Valid filter fields are `system_id` and `hotfix_id`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsPatches>]
    def get_systeminsights_patches(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_patches_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Patches
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;hotfix_id&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsPatches>, Fixnum, Hash)>] Array<SystemInsightsPatches> data, response status code and response headers
    def get_systeminsights_patches_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_patches ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_patches"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_patches"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_patches, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_patches, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_patches, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/patches"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsPatches>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_patches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Programs
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsPrograms>]
    def get_systeminsights_programs(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_programs_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Programs
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsPrograms>, Fixnum, Hash)>] Array<SystemInsightsPrograms> data, response status code and response headers
    def get_systeminsights_programs_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_programs ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_programs"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_programs"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_programs, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_programs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_programs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/programs"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsPrograms>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_programs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Python Packages
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsPythonPackages>]
    def get_systeminsights_python_packages(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_python_packages_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Python Packages
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsPythonPackages>, Fixnum, Hash)>] Array<SystemInsightsPythonPackages> data, response status code and response headers
    def get_systeminsights_python_packages_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_python_packages ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_python_packages"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_python_packages"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_python_packages, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_python_packages, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_python_packages, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/python_packages"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsPythonPackages>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_python_packages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Safari Extensions
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSafariExtensions>]
    def get_systeminsights_safari_extensions(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_safari_extensions_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Safari Extensions
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSafariExtensions>, Fixnum, Hash)>] Array<SystemInsightsSafariExtensions> data, response status code and response headers
    def get_systeminsights_safari_extensions_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_safari_extensions ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_safari_extensions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_safari_extensions"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_safari_extensions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_safari_extensions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_safari_extensions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/safari_extensions"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSafariExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_safari_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Scheduled Tasks
    # Valid filter fields are `system_id` and `enabled`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsScheduledTasks>]
    def get_systeminsights_scheduled_tasks(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_scheduled_tasks_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Scheduled Tasks
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsScheduledTasks>, Fixnum, Hash)>] Array<SystemInsightsScheduledTasks> data, response status code and response headers
    def get_systeminsights_scheduled_tasks_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_scheduled_tasks ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_scheduled_tasks"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_scheduled_tasks"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_scheduled_tasks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_scheduled_tasks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_scheduled_tasks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/scheduled_tasks"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsScheduledTasks>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_scheduled_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Services
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsServices>]
    def get_systeminsights_services(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_services_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Services
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsServices>, Fixnum, Hash)>] Array<SystemInsightsServices> data, response status code and response headers
    def get_systeminsights_services_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_services ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_services"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_services"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_services, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/services"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsServices>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LIst System Insights Shadow
    # Valid filter fields are `system_id` and `username`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsShadow>]
    def get_systeminsights_shadow(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_shadow_with_http_info(accept, content_type, opts)
      return data
    end

    # LIst System Insights Shadow
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsShadow>, Fixnum, Hash)>] Array<SystemInsightsShadow> data, response status code and response headers
    def get_systeminsights_shadow_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_shadow ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_shadow"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_shadow"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_shadow, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_shadow, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_shadow, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/shadow"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsShadow>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_shadow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Shared Folders
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSharedFolders>]
    def get_systeminsights_shared_folders(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_shared_folders_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Shared Folders
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSharedFolders>, Fixnum, Hash)>] Array<SystemInsightsSharedFolders> data, response status code and response headers
    def get_systeminsights_shared_folders_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_shared_folders ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_shared_folders"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_shared_folders"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_shared_folders, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_shared_folders, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_shared_folders, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/shared_folders"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSharedFolders>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_shared_folders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Shared Resources
    # Valid filter fields are `system_id` and `type`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSharedResources>]
    def get_systeminsights_shared_resources(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_shared_resources_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Shared Resources
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSharedResources>, Fixnum, Hash)>] Array<SystemInsightsSharedResources> data, response status code and response headers
    def get_systeminsights_shared_resources_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_shared_resources ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_shared_resources"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_shared_resources"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_shared_resources, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_shared_resources, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_shared_resources, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/shared_resources"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSharedResources>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_shared_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Sharing Preferences
    # Only valid filed field is `system_id`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSharingPreferences>]
    def get_systeminsights_sharing_preferences(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_sharing_preferences_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Sharing Preferences
    # Only valid filed field is &#x60;system_id&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSharingPreferences>, Fixnum, Hash)>] Array<SystemInsightsSharingPreferences> data, response status code and response headers
    def get_systeminsights_sharing_preferences_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_sharing_preferences ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_sharing_preferences"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_sharing_preferences"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_sharing_preferences, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_sharing_preferences, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_sharing_preferences, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/sharing_preferences"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSharingPreferences>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_sharing_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights SIP Config
    # Valid filter fields are `system_id` and `enabled`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSipConfig>]
    def get_systeminsights_sip_config(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_sip_config_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights SIP Config
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSipConfig>, Fixnum, Hash)>] Array<SystemInsightsSipConfig> data, response status code and response headers
    def get_systeminsights_sip_config_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_sip_config ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_sip_config"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_sip_config"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_sip_config, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_sip_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_sip_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/sip_config"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSipConfig>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_sip_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Startup Items
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsStartupItems>]
    def get_systeminsights_startup_items(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_startup_items_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Startup Items
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsStartupItems>, Fixnum, Hash)>] Array<SystemInsightsStartupItems> data, response status code and response headers
    def get_systeminsights_startup_items_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_startup_items ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_startup_items"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_startup_items"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_startup_items, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_startup_items, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_startup_items, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/startup_items"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsStartupItems>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_startup_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Control
    # Valid filter fields are `system_id` and `name`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSystemControls>]
    def get_systeminsights_system_controls(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_system_controls_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights System Control
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSystemControls>, Fixnum, Hash)>] Array<SystemInsightsSystemControls> data, response status code and response headers
    def get_systeminsights_system_controls_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_system_controls ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_system_controls"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_system_controls"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_system_controls, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_system_controls, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_system_controls, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/system_controls"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSystemControls>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_system_controls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Info
    # Valid filter fields are `system_id` and `cpu_subtype`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsSystemInfo>]
    def get_systeminsights_system_info(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_system_info_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights System Info
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;cpu_subtype&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsSystemInfo>, Fixnum, Hash)>] Array<SystemInsightsSystemInfo> data, response status code and response headers
    def get_systeminsights_system_info_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_system_info ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_system_info"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_system_info"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_system_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_system_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_system_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/system_info"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSystemInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_system_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Uptime
    # Valid filter fields are `system_id` and `days`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsUptime>]
    def get_systeminsights_uptime(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_uptime_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Uptime
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;days&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsUptime>, Fixnum, Hash)>] Array<SystemInsightsUptime> data, response status code and response headers
    def get_systeminsights_uptime_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_uptime ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_uptime"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_uptime"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_uptime, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_uptime, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_uptime, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/uptime"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUptime>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_uptime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights USB Devices
    # Valid filter fields are `system_id` and `model`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsUsbDevices>]
    def get_systeminsights_usb_devices(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_usb_devices_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights USB Devices
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;model&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsUsbDevices>, Fixnum, Hash)>] Array<SystemInsightsUsbDevices> data, response status code and response headers
    def get_systeminsights_usb_devices_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_usb_devices ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_usb_devices"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_usb_devices"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_usb_devices, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_usb_devices, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_usb_devices, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/usb_devices"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUsbDevices>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_usb_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights User Groups
    # Only valid filter field is `system_id`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsUserGroups>]
    def get_systeminsights_user_groups(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_user_groups_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights User Groups
    # Only valid filter field is &#x60;system_id&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsUserGroups>, Fixnum, Hash)>] Array<SystemInsightsUserGroups> data, response status code and response headers
    def get_systeminsights_user_groups_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_user_groups ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_user_groups"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_user_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_user_groups, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_user_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_user_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/user_groups"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUserGroups>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights User SSH Keys
    # Valid filter fields are `system_id` and `uid`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsUserSshKeys>]
    def get_systeminsights_user_ssh_keys(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_user_ssh_keys_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights User SSH Keys
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;uid&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsUserSshKeys>, Fixnum, Hash)>] Array<SystemInsightsUserSshKeys> data, response status code and response headers
    def get_systeminsights_user_ssh_keys_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_user_ssh_keys ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_user_ssh_keys"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_user_ssh_keys"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_user_ssh_keys, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_user_ssh_keys, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_user_ssh_keys, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/user_ssh_keys"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUserSshKeys>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_user_ssh_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Users
    # Valid filter fields are `system_id` and `username`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsUsers>]
    def get_systeminsights_users(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_users_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Users
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsUsers>, Fixnum, Hash)>] Array<SystemInsightsUsers> data, response status code and response headers
    def get_systeminsights_users_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_users ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_users"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_users"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_users, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/users"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUsers>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights WiFi Networks
    # Valid filter fields are `system_id` and `security_type`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsWifiNetworks>]
    def get_systeminsights_wifi_networks(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_wifi_networks_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights WiFi Networks
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;security_type&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsWifiNetworks>, Fixnum, Hash)>] Array<SystemInsightsWifiNetworks> data, response status code and response headers
    def get_systeminsights_wifi_networks_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_wifi_networks ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_wifi_networks"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_wifi_networks"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_wifi_networks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_wifi_networks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_wifi_networks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/wifi_networks"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsWifiNetworks>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_wifi_networks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights WiFi Status
    # Valid filter fields are `system_id` and `security_type`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsWifiStatus>]
    def get_systeminsights_wifi_status(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_wifi_status_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights WiFi Status
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;security_type&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsWifiStatus>, Fixnum, Hash)>] Array<SystemInsightsWifiStatus> data, response status code and response headers
    def get_systeminsights_wifi_status_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_wifi_status ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_wifi_status"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_wifi_status"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_wifi_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_wifi_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_wifi_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/wifi_status"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsWifiStatus>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_wifi_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Windows Security Products
    # Valid filter fields are `system_id` and `state`.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [String] :x_org_id  (default to )
    # @return [Array<SystemInsightsWindowsSecurityProducts>]
    def get_systeminsights_windows_security_products(accept, content_type, opts = {})
      data, _status_code, _headers = get_systeminsights_windows_security_products_with_http_info(accept, content_type, opts)
      return data
    end

    # List System Insights Windows Security Products
    # Valid filter fields are &#x60;system_id&#x60; and &#x60;state&#x60;.
    # @param accept 
    # @param content_type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending. 
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @option opts [Integer] :limit 
    # @option opts [String] :x_org_id 
    # @return [Array<(Array<SystemInsightsWindowsSecurityProducts>, Fixnum, Hash)>] Array<SystemInsightsWindowsSecurityProducts> data, response status code and response headers
    def get_systeminsights_windows_security_products_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.get_systeminsights_windows_security_products ..."
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling SystemInsightsApi.get_systeminsights_windows_security_products"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SystemInsightsApi.get_systeminsights_windows_security_products"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.get_systeminsights_windows_security_products, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_windows_security_products, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.get_systeminsights_windows_security_products, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/windows_security_products"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'x-org-id'] = opts[:'x_org_id'] if !opts[:'x_org_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['x-api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsWindowsSecurityProducts>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#get_systeminsights_windows_security_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
