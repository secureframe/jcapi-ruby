=begin
#JumpCloud APIs

#JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module JCAPIv1
  # 
  class Organizationsettings
    attr_accessor :beta_features

    attr_accessor :contact_email

    attr_accessor :contact_name

    attr_accessor :disable_command_runner

    attr_accessor :disable_ldap

    attr_accessor :disable_um

    attr_accessor :duplicate_ldap_groups

    attr_accessor :email_disclaimer

    attr_accessor :enable_google_apps

    attr_accessor :enable_managed_uid

    attr_accessor :enable_o365

    attr_accessor :enable_user_portal_agent_install

    attr_accessor :features

    attr_accessor :logo

    attr_accessor :name

    attr_accessor :password_compliance

    attr_accessor :password_policy

    attr_accessor :pending_delete

    attr_accessor :show_intro

    attr_accessor :system_user_password_expiration_in_days

    attr_accessor :system_users_can_edit

    attr_accessor :disable_google_login

    attr_accessor :user_portal

    attr_accessor :device_identification_enabled

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'beta_features' => :'betaFeatures',
        :'contact_email' => :'contactEmail',
        :'contact_name' => :'contactName',
        :'disable_command_runner' => :'disableCommandRunner',
        :'disable_ldap' => :'disableLdap',
        :'disable_um' => :'disableUM',
        :'duplicate_ldap_groups' => :'duplicateLDAPGroups',
        :'email_disclaimer' => :'emailDisclaimer',
        :'enable_google_apps' => :'enableGoogleApps',
        :'enable_managed_uid' => :'enableManagedUID',
        :'enable_o365' => :'enableO365',
        :'enable_user_portal_agent_install' => :'enableUserPortalAgentInstall',
        :'features' => :'features',
        :'logo' => :'logo',
        :'name' => :'name',
        :'password_compliance' => :'passwordCompliance',
        :'password_policy' => :'passwordPolicy',
        :'pending_delete' => :'pendingDelete',
        :'show_intro' => :'showIntro',
        :'system_user_password_expiration_in_days' => :'systemUserPasswordExpirationInDays',
        :'system_users_can_edit' => :'systemUsersCanEdit',
        :'disable_google_login' => :'disableGoogleLogin',
        :'user_portal' => :'userPortal',
        :'device_identification_enabled' => :'deviceIdentificationEnabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'beta_features' => :'Object',
        :'contact_email' => :'String',
        :'contact_name' => :'String',
        :'disable_command_runner' => :'BOOLEAN',
        :'disable_ldap' => :'BOOLEAN',
        :'disable_um' => :'BOOLEAN',
        :'duplicate_ldap_groups' => :'BOOLEAN',
        :'email_disclaimer' => :'String',
        :'enable_google_apps' => :'BOOLEAN',
        :'enable_managed_uid' => :'BOOLEAN',
        :'enable_o365' => :'BOOLEAN',
        :'enable_user_portal_agent_install' => :'BOOLEAN',
        :'features' => :'OrganizationsettingsputFeatures',
        :'logo' => :'String',
        :'name' => :'String',
        :'password_compliance' => :'String',
        :'password_policy' => :'OrganizationsettingsPasswordPolicy',
        :'pending_delete' => :'BOOLEAN',
        :'show_intro' => :'BOOLEAN',
        :'system_user_password_expiration_in_days' => :'Integer',
        :'system_users_can_edit' => :'BOOLEAN',
        :'disable_google_login' => :'BOOLEAN',
        :'user_portal' => :'OrganizationsettingsputUserPortal',
        :'device_identification_enabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'betaFeatures')
        self.beta_features = attributes[:'betaFeatures']
      end

      if attributes.has_key?(:'contactEmail')
        self.contact_email = attributes[:'contactEmail']
      end

      if attributes.has_key?(:'contactName')
        self.contact_name = attributes[:'contactName']
      end

      if attributes.has_key?(:'disableCommandRunner')
        self.disable_command_runner = attributes[:'disableCommandRunner']
      end

      if attributes.has_key?(:'disableLdap')
        self.disable_ldap = attributes[:'disableLdap']
      end

      if attributes.has_key?(:'disableUM')
        self.disable_um = attributes[:'disableUM']
      end

      if attributes.has_key?(:'duplicateLDAPGroups')
        self.duplicate_ldap_groups = attributes[:'duplicateLDAPGroups']
      end

      if attributes.has_key?(:'emailDisclaimer')
        self.email_disclaimer = attributes[:'emailDisclaimer']
      end

      if attributes.has_key?(:'enableGoogleApps')
        self.enable_google_apps = attributes[:'enableGoogleApps']
      end

      if attributes.has_key?(:'enableManagedUID')
        self.enable_managed_uid = attributes[:'enableManagedUID']
      end

      if attributes.has_key?(:'enableO365')
        self.enable_o365 = attributes[:'enableO365']
      end

      if attributes.has_key?(:'enableUserPortalAgentInstall')
        self.enable_user_portal_agent_install = attributes[:'enableUserPortalAgentInstall']
      end

      if attributes.has_key?(:'features')
        self.features = attributes[:'features']
      end

      if attributes.has_key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'passwordCompliance')
        self.password_compliance = attributes[:'passwordCompliance']
      end

      if attributes.has_key?(:'passwordPolicy')
        self.password_policy = attributes[:'passwordPolicy']
      end

      if attributes.has_key?(:'pendingDelete')
        self.pending_delete = attributes[:'pendingDelete']
      end

      if attributes.has_key?(:'showIntro')
        self.show_intro = attributes[:'showIntro']
      end

      if attributes.has_key?(:'systemUserPasswordExpirationInDays')
        self.system_user_password_expiration_in_days = attributes[:'systemUserPasswordExpirationInDays']
      end

      if attributes.has_key?(:'systemUsersCanEdit')
        self.system_users_can_edit = attributes[:'systemUsersCanEdit']
      end

      if attributes.has_key?(:'disableGoogleLogin')
        self.disable_google_login = attributes[:'disableGoogleLogin']
      end

      if attributes.has_key?(:'userPortal')
        self.user_portal = attributes[:'userPortal']
      end

      if attributes.has_key?(:'deviceIdentificationEnabled')
        self.device_identification_enabled = attributes[:'deviceIdentificationEnabled']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      password_compliance_validator = EnumAttributeValidator.new('String', ["custom", "pci3", "windows"])
      return false unless password_compliance_validator.valid?(@password_compliance)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] password_compliance Object to be assigned
    def password_compliance=(password_compliance)
      validator = EnumAttributeValidator.new('String', ["custom", "pci3", "windows"])
      unless validator.valid?(password_compliance)
        fail ArgumentError, "invalid value for 'password_compliance', must be one of #{validator.allowable_values}."
      end
      @password_compliance = password_compliance
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          beta_features == o.beta_features &&
          contact_email == o.contact_email &&
          contact_name == o.contact_name &&
          disable_command_runner == o.disable_command_runner &&
          disable_ldap == o.disable_ldap &&
          disable_um == o.disable_um &&
          duplicate_ldap_groups == o.duplicate_ldap_groups &&
          email_disclaimer == o.email_disclaimer &&
          enable_google_apps == o.enable_google_apps &&
          enable_managed_uid == o.enable_managed_uid &&
          enable_o365 == o.enable_o365 &&
          enable_user_portal_agent_install == o.enable_user_portal_agent_install &&
          features == o.features &&
          logo == o.logo &&
          name == o.name &&
          password_compliance == o.password_compliance &&
          password_policy == o.password_policy &&
          pending_delete == o.pending_delete &&
          show_intro == o.show_intro &&
          system_user_password_expiration_in_days == o.system_user_password_expiration_in_days &&
          system_users_can_edit == o.system_users_can_edit &&
          disable_google_login == o.disable_google_login &&
          user_portal == o.user_portal &&
          device_identification_enabled == o.device_identification_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [beta_features, contact_email, contact_name, disable_command_runner, disable_ldap, disable_um, duplicate_ldap_groups, email_disclaimer, enable_google_apps, enable_managed_uid, enable_o365, enable_user_portal_agent_install, features, logo, name, password_compliance, password_policy, pending_delete, show_intro, system_user_password_expiration_in_days, system_users_can_edit, disable_google_login, user_portal, device_identification_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = JCAPIv1.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
